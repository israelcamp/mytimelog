{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["calculateHourMinutes","deltaSeconds","hours","Math","floor","minutes","round","dateDisplay","date","h","getHours","m","getMinutes","logTasks","tasksLogs","map","name","duration","className","start","end","totalLogDisplay","console","log","length","totalSeconds","hoursLeft","minutesLeft","App","useState","taskName","setTaskName","taskStartTime","setTaskStartTime","setTasksLogs","handleLog","newLog","calculateDelta","value","onChange","e","target","onClick","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAGA,SAASA,EAAqBC,GAC5B,IAAMC,EAAQC,KAAKC,MAAMH,EAAe,MAExC,MAAO,CAAEC,QAAOG,QADAF,KAAKG,OAAOL,EAAuB,KAARC,GAAgB,KAgB7D,SAASK,EAAYC,GACnB,IAAMC,EAAID,EAAKE,WACTC,EAAC,UAAMH,EAAKI,aAAe,GAAK,IAAM,IAArC,OAA0CJ,EAAKI,cACtD,MAAM,GAAN,OAAUH,EAAV,YAAeE,GAGjB,SAASE,EAASC,GAChB,OACE,gCACE,gCACGA,EAAUC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACb,qBAAeC,UAAU,UAAzB,UACE,oBAAIA,UAAU,cAAd,mBAAgCD,EAASf,MAAzC,aAAmDe,EAASZ,QAA5D,SACA,oBAAIa,UAAU,cAAd,mBAAgCX,EAC9BU,EAASE,OADX,cAEOZ,EAAYU,EAASG,QAC5B,oBAAIF,UAAU,UAAd,SAAyBF,MALlBA,UAanB,SAASK,EAAgBP,GAEvB,GADAQ,QAAQC,IAAIT,KACRA,EAAUU,OAAS,GAAvB,CACA,IAHkC,EAG9BC,EAAe,EAHe,cAIlBX,GAJkB,IAIlC,4BAA2BW,GAA3B,QAA6CR,SAAShB,cAJpB,oCAKPD,EAAqByB,GAAxCvB,EAL0B,EAK1BA,MAAOG,EALmB,EAKnBA,QAETqB,EAAYxB,EAAQ,EAAI,EAAIA,EAAQ,EAAI,EACxCyB,EAAczB,EAAQ,EAAI,GAAKG,EAAU,EAE/C,OACE,gCACE,kCACE,qBAAIa,UAAU,UAAd,UACE,oBAAIA,UAAU,UAAd,wBACA,oBAAIA,UAAU,cAAd,mBAAgChB,EAAhC,aACEG,EAAU,GAAK,IAAM,IADvB,OAEGA,EAFH,YAIF,qBAAIa,UAAU,UAAd,UACE,oBAAIA,UAAU,UAAd,wBACA,oBAAIA,UAAU,cAAd,mBAAgCQ,EAAhC,aACEC,EAAc,GAAK,IAAM,IAD3B,OAEGA,EAFH,kBAsDKC,MA7Cf,WAAgB,IAAD,EACmBC,mBAAS,cAD5B,mBACNC,EADM,KACIC,EADJ,OAE6BF,mBAAS,MAFtC,mBAENG,EAFM,KAESC,EAFT,OAGqBJ,mBAAS,IAH9B,mBAGNf,EAHM,KAGKoB,EAHL,KAKPC,EAAY,SAACL,EAAUX,EAAOC,GAClC,IACMgB,EAAS,CACbpB,KAAMc,EACNb,SA3EN,SAAwBG,EAAKD,GAC3B,IAAMlB,GAAgBmB,EAAMD,GAAS,IADH,EAEPnB,EAAqBC,GAChD,MAAO,CACLC,MAJgC,EAE1BA,MAGNG,QALgC,EAEnBA,QAIbJ,eACAkB,QACAC,OAgEiBiB,CAAejB,EAAKD,IAKrCe,EAAa,GAAD,mBAAKpB,GAAL,CAAgBsB,KAC5BL,EAAY,IACZE,EAAiBb,IAcnB,OACE,qBAAKF,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8BAAMG,EAAgBP,KACtB,sBAAKI,UAAU,cAAf,UACE,uBACEA,UAAU,aACVoB,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAAYS,EAAEC,OAAOH,UAExC,wBAAQI,QArBO,WAErB,GAAiB,eAAbZ,EAA2B,CAC7B,IAAMX,EAAQ,IAAIwB,KAClBR,EAAUL,EAAUX,EAAOA,QACtB,GAAIW,EAASN,OAAS,EAAG,CAC9B,IAAMJ,EAAM,IAAIuB,KAChBR,EAAUL,EAAUE,EAAeZ,KAc/B,oBAEF,8BAAMP,EAASC,WCtGR8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d3df6014.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\n\nfunction calculateHourMinutes(deltaSeconds) {\n  const hours = Math.floor(deltaSeconds / 3600);\n  const minutes = Math.round((deltaSeconds - hours * 3600) / 60);\n  return { hours, minutes };\n}\n\nfunction calculateDelta(end, start) {\n  const deltaSeconds = (end - start) / 1000;\n  const { hours, minutes } = calculateHourMinutes(deltaSeconds);\n  return {\n    hours,\n    minutes,\n    deltaSeconds,\n    start,\n    end,\n  };\n}\n\nfunction dateDisplay(date) {\n  const h = date.getHours();\n  const m = `${date.getMinutes() < 10 ? \"0\" : \"\"}${date.getMinutes()}`;\n  return `${h}:${m}`;\n}\n\nfunction logTasks(tasksLogs) {\n  return (\n    <table>\n      <tbody>\n        {tasksLogs.map(({ name, duration }) => (\n          <tr key={name} className=\"tr-logs\">\n            <td className=\"td-duration\">{`${duration.hours}h ${duration.minutes}min`}</td>\n            <td className=\"td-interval\">{`${dateDisplay(\n              duration.start\n            )} - ${dateDisplay(duration.end)}`}</td>\n            <td className=\"td-name\">{name}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction totalLogDisplay(tasksLogs) {\n  console.log(tasksLogs);\n  if (tasksLogs.length < 1) return;\n  var totalSeconds = 0;\n  for (const a of tasksLogs) totalSeconds += a.duration.deltaSeconds;\n  const { hours, minutes } = calculateHourMinutes(totalSeconds);\n\n  const hoursLeft = hours < 8 ? 8 - hours - 1 : 0;\n  const minutesLeft = hours < 8 ? 60 - minutes : 0;\n\n  return (\n    <table>\n      <tbody>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Work Done:</td>\n          <td className=\"td-duration\">{`${hours}h ${\n            minutes < 10 ? \"0\" : \"\"\n          }${minutes}min`}</td>\n        </tr>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Time Left:</td>\n          <td className=\"td-duration\">{`${hoursLeft}h ${\n            minutesLeft < 10 ? \"0\" : \"\"\n          }${minutesLeft}min`}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  const [taskName, setTaskName] = useState(\"arrived **\");\n  const [taskStartTime, setTaskStartTime] = useState(null);\n  const [tasksLogs, setTasksLogs] = useState([]);\n\n  const handleLog = (taskName, start, end) => {\n    const duration = calculateDelta(end, start);\n    const newLog = {\n      name: taskName,\n      duration,\n    };\n    setTasksLogs([...tasksLogs, newLog]);\n    setTaskName(\"\");\n    setTaskStartTime(end);\n  };\n\n  const handleAddClick = () => {\n    // start counting\n    if (taskName === \"arrived **\") {\n      const start = new Date();\n      handleLog(taskName, start, start);\n    } else if (taskName.length > 0) {\n      const end = new Date(); // we ended previous task\n      handleLog(taskName, taskStartTime, end);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>{totalLogDisplay(tasksLogs)}</div>\n        <div className=\"Insert-task\">\n          <input\n            className=\"input-task\"\n            value={taskName}\n            onChange={(e) => setTaskName(e.target.value)}\n          ></input>\n          <button onClick={handleAddClick}>Add</button>\n        </div>\n        <div>{logTasks(tasksLogs)}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}