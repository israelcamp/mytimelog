{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateHourMinutes","deltaSeconds","hours","Math","round","minutes","calculateSecondsInterval","end","start","calculateDelta","formatHoursMinutes","h","m","durationDisplay","dateDisplay","date","hoursMinutesDisplay","getHours","getMinutes","rowDisplay","name","idx","tasksLogs","duration","className","endsWith","logTasks","map","Fragment","totalLogDisplay","length","totalSeconds","i","task","hoursLeft","minutesLeft","App","useState","taskName","setTaskName","Date","everyMinuteDate","setEveryMinuteDate","setTasksLogs","useEffect","interval","setInterval","clearInterval","handleAddClick","newLog","handleLog","calculateTaskDuration","value","onKeyPress","e","key","onChange","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f86abde.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\ninterface Duration {\n  hours: number;\n  minutes: number;\n}\n\ninterface Task {\n  name: string;\n  date: Date;\n}\n\nfunction calculateHourMinutes(\n  deltaSeconds: number\n): Duration {\n  const hours: number = Math.round(deltaSeconds / 3600);\n  const minutes: number = Math.round((deltaSeconds - hours * 3600) / 60);\n  return { hours, minutes };\n}\n\nfunction calculateSecondsInterval(end: Date, start: Date):number {\n  return (+end - +start) / 1000\n}\n\nfunction calculateDelta(end: Date, start: Date): Duration {\n  const deltaSeconds = calculateSecondsInterval(end, start);\n  const { hours, minutes } = calculateHourMinutes(deltaSeconds);\n  return {\n    hours,\n    minutes,\n  };\n}\n\nfunction formatHoursMinutes(hours:number, minutes:number) : {h:string, m:string} {\n  const h =  `${hours}`;\n  const m = `${minutes < 10 ? \"0\" : \"\"}${minutes}`;\n  return {h, m};\n}\n\nfunction hoursMinutesDisplay(hours: number, minutes: number): string {\n  const {h, m} = formatHoursMinutes(hours, minutes);\n  return `${h}:${m}`;\n}\n\nfunction durationDisplay(hours: number, minutes:number):string {\n  const {h, m} = formatHoursMinutes(hours, minutes);\n  return `${h}h ${m}min`;\n}\n\nfunction dateDisplay(date: Date): string {\n  return hoursMinutesDisplay(date.getHours(), date.getMinutes());\n}\n\nfunction rowDisplay(name:string, date:Date, idx:number, tasksLogs:Task[]) {\n  let start: Date;\n  if (idx === 0) {\n    start = date;\n  } else {\n    start = tasksLogs[idx-1].date;\n  }\n  const duration = calculateDelta(date, start);\n  return (\n    <tr key={name} className=\"tr-logs\">\n      <td className=\"td-duration\">{durationDisplay(duration.hours, duration.minutes)}</td>\n      <td className=\"td-interval\">{`${dateDisplay(\n        start\n      )} - ${dateDisplay(date)}`}</td>\n      {name.endsWith(\"**\") ? (\n        <td className=\"td-name-ignore\">{name}</td>\n      ) : (\n        <td className=\"td-name\">{name}</td>\n      )}\n    </tr>\n  )\n\n}\n\nfunction logTasks(tasksLogs: Task[]) {\n  return (\n    <table>\n      <tbody>\n        {tasksLogs.map(({ name, date }, idx) => (\n          <React.Fragment key={name+`${idx}`}>{rowDisplay(name, date, idx, tasksLogs)}</React.Fragment>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction totalLogDisplay(tasksLogs: Task[]) {\n  if (tasksLogs.length < 2) return;\n  var totalSeconds = 0;\n  for (let i = 1; i < tasksLogs.length; i++){\n    const task = tasksLogs[i];\n    if (!task.name.endsWith(\"**\")) {\n      totalSeconds += calculateSecondsInterval(task.date, tasksLogs[i-1].date);\n    }\n  }\n\n  const { hours, minutes } = calculateHourMinutes(totalSeconds);\n\n  let hoursLeft = hours < 8 ? 8 - hours - 1 : 0;\n  let minutesLeft = hours < 8 ? 60 - minutes : 0;\n  if (hoursLeft === 7 && minutesLeft === 60) {\n    hoursLeft = 8;\n    minutesLeft = 0;\n  }\n\n  return (\n    <table>\n      <tbody>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Work Done:</td>\n          <td className=\"td-duration\">{durationDisplay(hours, minutes)}</td>\n        </tr>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Time Left:</td>\n          <td className=\"td-duration\">{durationDisplay(hoursLeft, minutesLeft)}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  const [taskName, setTaskName] = useState<string>(\"arrived **\");\n  const [everyMinuteDate, setEveryMinuteDate] = useState<Date>(new Date());\n  const [tasksLogs, setTasksLogs] = useState<Task[]>([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setEveryMinuteDate(new Date());\n    }, 1000 * 60);\n    return () => clearInterval(interval);\n  }, []);\n\n  const calculateTaskDuration = (start: Date, end: Date) => {\n    const { hours, minutes } = calculateDelta(end, start);\n    return <>{durationDisplay(hours, minutes)}</>;\n  };\n\n  const handleLog = (taskName: string) => {\n    const newLog = {\n      name: taskName,\n      date: new Date(),\n    };\n    setTasksLogs([...tasksLogs, newLog]);\n    setTaskName(\"\");\n    setEveryMinuteDate(new Date());\n  };\n\n  const handleAddClick = () => {\n    handleLog(taskName);\n  };\n\n  const handleTaskName = (name: string) => {\n    if (tasksLogs.length > 0) {\n      setTaskName(name);\n    }\n  }\n\n  const handleKeyPress = (e:React.KeyboardEvent) => {\n    if (e.key === 'Enter') handleAddClick();\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>{totalLogDisplay(tasksLogs)}</div>\n        <div className=\"Insert-task\">\n          {tasksLogs.length > 0 ? calculateTaskDuration(tasksLogs[tasksLogs.length - 1].date, everyMinuteDate):<></>}\n          <input\n            className=\"input-task\"\n            value={taskName}\n            onKeyPress={handleKeyPress}\n            onChange={(e) => handleTaskName(e.target.value)}\n          ></input>\n          <button onClick={handleAddClick} >Add</button>\n        </div>\n        <div>{logTasks(tasksLogs)}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}