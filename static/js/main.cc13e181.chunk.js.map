{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["calculateHourMinutes","deltaSeconds","hours","Math","floor","minutes","calculateDelta","end","start","dateDisplay","date","h","getHours","m","getMinutes","logTasks","tasksLogs","map","name","duration","className","endsWith","totalLogDisplay","length","totalSeconds","a","hoursLeft","minutesLeft","App","useState","taskName","setTaskName","Date","taskStartTime","setTaskStartTime","everyMinuteDate","setEveryMinuteDate","setTasksLogs","useEffect","interval","setInterval","clearInterval","handleLog","newLog","calculateTaskDuration","value","onChange","e","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc13e181.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\ninterface Duration {\n  hours: number;\n  minutes: number;\n  deltaSeconds: number;\n  start: Date;\n  end: Date;\n}\n\ninterface Task {\n  name: string;\n  duration: Duration;\n}\n\nfunction calculateHourMinutes(\n  deltaSeconds: number\n): { hours: number; minutes: number } {\n  const hours: number = Math.floor(deltaSeconds / 3600);\n  const minutes: number = Math.floor((deltaSeconds - hours * 3600) / 60);\n  return { hours, minutes };\n}\n\nfunction calculateDelta(end: Date, start: Date): Duration {\n  const deltaSeconds = (+end - +start) / 1000;\n  const { hours, minutes } = calculateHourMinutes(deltaSeconds);\n  return {\n    hours,\n    minutes,\n    deltaSeconds,\n    start,\n    end,\n  };\n}\n\nfunction dateDisplay(date: Date): string {\n  const h = date.getHours();\n  const m = `${date.getMinutes() < 10 ? \"0\" : \"\"}${date.getMinutes()}`;\n  return `${h}:${m}`;\n}\n\nfunction logTasks(tasksLogs: Task[]) {\n  return (\n    <table>\n      <tbody>\n        {tasksLogs.map(({ name, duration }) => (\n          <tr key={name} className=\"tr-logs\">\n            <td className=\"td-duration\">{`${duration.hours}h ${\n              duration.minutes < 10 ? \"0\" : \"\"\n            }${duration.minutes}min`}</td>\n            <td className=\"td-interval\">{`${dateDisplay(\n              duration.start\n            )} - ${dateDisplay(duration.end)}`}</td>\n            {name.endsWith(\"**\") ? (\n              <td className=\"td-name-ignore\">{name}</td>\n            ) : (\n              <td className=\"td-name\">{name}</td>\n            )}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nfunction totalLogDisplay(tasksLogs: Task[]) {\n  if (tasksLogs.length < 1) return;\n  var totalSeconds = 0;\n  for (const a of tasksLogs)\n    if (!a.name.endsWith(\"**\")) totalSeconds += a.duration.deltaSeconds;\n\n  const { hours, minutes } = calculateHourMinutes(totalSeconds);\n\n  let hoursLeft = hours < 8 ? 8 - hours - 1 : 0;\n  let minutesLeft = hours < 8 ? 60 - minutes : 0;\n  if (hoursLeft === 7 && minutesLeft === 60) {\n    hoursLeft = 8;\n    minutesLeft = 0;\n  }\n\n  return (\n    <table>\n      <tbody>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Work Done:</td>\n          <td className=\"td-duration\">{`${hours}h ${\n            minutes < 10 ? \"0\" : \"\"\n          }${minutes}min`}</td>\n        </tr>\n        <tr className=\"tr-work\">\n          <td className=\"td-name\">Time Left:</td>\n          <td className=\"td-duration\">{`${hoursLeft}h ${\n            minutesLeft < 10 ? \"0\" : \"\"\n          }${minutesLeft}min`}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n}\n\nfunction App() {\n  const [taskName, setTaskName] = useState<string>(\"arrived **\");\n  const [taskStartTime, setTaskStartTime] = useState<Date>(new Date());\n  const [everyMinuteDate, setEveryMinuteDate] = useState<Date>(new Date());\n  const [tasksLogs, setTasksLogs] = useState<Task[]>([]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setEveryMinuteDate(new Date());\n    }, 1000 * 60);\n    return () => clearInterval(interval);\n  }, []);\n\n  const calculateTaskDuration = (start: Date, end: Date) => {\n    const { hours, minutes } = calculateDelta(end, start);\n    return <>{`${hours}h ${minutes < 10 ? \"0\" : \"\"}${minutes}m`}</>;\n  };\n\n  const handleLog = (taskName: string, start: Date, end: Date) => {\n    const duration = calculateDelta(end, start);\n    const newLog = {\n      name: taskName,\n      duration,\n    };\n    setTasksLogs([...tasksLogs, newLog]);\n    setTaskName(\"\");\n    setTaskStartTime(end);\n    setEveryMinuteDate(new Date());\n  };\n\n  const handleAddClick = () => {\n    // start counting\n    if (taskName === \"arrived **\") {\n      const start = new Date();\n      handleLog(taskName, start, start);\n    } else if (taskName.length > 0) {\n      const end = new Date(); // we ended previous task\n      handleLog(taskName, taskStartTime, end);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>{totalLogDisplay(tasksLogs)}</div>\n        <div className=\"Insert-task\">\n          {calculateTaskDuration(taskStartTime, everyMinuteDate)}\n          <input\n            className=\"input-task\"\n            value={taskName}\n            onChange={(e) => setTaskName(e.target.value)}\n          ></input>\n          <button onClick={handleAddClick}>Add</button>\n        </div>\n        <div>{logTasks(tasksLogs)}</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}